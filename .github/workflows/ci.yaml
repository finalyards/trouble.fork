name: CI

on:
  # disabled, just for the study (put back for main repo!) TEMP!!
  push:
    #|branches:
    #|  - main
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:  # needed to be in 'main', for any branch to have 'Run Workflow' available, in the GitHub UI.

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: df -h  # 23G available
      # Free some disk space, kudos to https://carlosbecker.com/posts/github-actions-disk-space/
      #
      #   Notes:
      #     - this image doesn't seem to have Docker images
      #     - deleting *anything* (almost; likely small files) comes with a time penalty; likely some overlays...
      #     - freeing Android images (9.8GB) doesn't! 👍
      #
      #   TIMING of 'rm -rf':
      #     - should be ~10s
      #     - IS NOT, and VARIES HUGELY BY THE RUNS (see below). For this reason, it makes sense to a) not clean anything,
      #       unless one really runs out of disk space (better to look into cache use, for example), b) clean only the
      #       lightest folders, which cause least delay to wipe.
      #     - THE CLEANUP CAN TAKE >5m - which makes no further sense.
      #
      #   path                    size    files     du -h times   clean times
      #   ----                    ----    -------   -----------   -----------
      #   /usr/share/dotnet       3.4G     34_850           25s            6s, 20s, 23s
      #   /usr/local/lib/android  9.8G    247_009         3m19s           39s, 2m55s, 2m54s
      #   /opt/hosted*cache/CodeQL 1.6G    38_472           21s            4s, 19s, 20s
      #   /opt/ghc                no such (Haskell compiler)
      #   Docker images           none
      #
      #|- run: |
      #|    du -h -d 1 /usr/share/dotnet
      #|    find /usr/share/dotnet -print | wc -l
      #|- run: |
      #|    du -h -d 1 /usr/local/lib/android
      #|    find /usr/local/lib/android -print | wc -l
      #|- run: |
      #|    du -h -d 1 /opt/hostedtoolcache/CodeQL
      #|    find /opt/hostedtoolcache/CodeQL -print | wc -l
      #|- run: docker image list   # (empty)

      # DISABLED: not needed, if caches are regularly wiped, or otherwise kept to reasonable size.
      #|- name: More space, please..
      #|  if: false
      #|  run: |
      #|    sudo rm -rf /usr/share/dotnet
      #|    sudo rm -rf /opt/hostedtoolcache/CodeQL
      #|  #
      #|  #sudo rm -rf /usr/local/lib/android   # takes too long
      #|- run: df -h  # 37GB
      #|  if: false

      # kept as a template; nothing needs the 'libudev-dev' (Oct'25)
      #- name: Add dependencies
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install --no-install-recommends libudev-dev
      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target_ci/
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-cargo-

      # We WISH all 'ci.sh' output are 'release', not 'debug'. Historically, this has not been the case: the tests
      # created 1.9GB of their own 'target_ci/debug'. If that exists in the cache, remove it.
      - name: Remove 'target_ci/debug' from the cached set
        run: |
          rm -rf target_ci/debug/

      - name: CI
        run: |
          ./ci.sh
          test ! -d target_ci/debug || (echo >&2 "Seems 'target_ci/debug' got created:"; du -h -d 1 target_ci/debug)

      - name: Disk space remaining (margin)
        run: df -h  # 26GB (first run; no cache; cleanup; started with 37GB)
                    # 11GB (cached run; no cleanup; started with 26GB)

      - name: Show renewed cache contents
        run: |
          du -h -d 1 ~/.cargo/bin/              # 48M
          du -h -d 1 ~/.cargo/registry/index/   # 24M
          du -h -d 1 ~/.cargo/registry/cache/   # 69M
          du -h -d 1 ~/.cargo/git/db/           # 162M
          du -h -d 2 target_ci/                 # 7.9GB  <-- but who's doing 1.9G worth of "target_ci/debug"??

      # Post Set up cargo cache:
      #   - first run: 2213MB pushed
      #   - cached run: xxx

  # Check binary-size, stolen from https://github.com/tweedegolf/sequential-storage/blob/master/.github/workflows/ci.yaml
  #   ..but also very much reproducible from: https://github.com/marketplace/actions/bloaty-action
  binary-size:
    needs: build        # run only if 'build' succeeds
    if: false           # TEMP; not in our interest
    runs-on: ubuntu-latest
    permissions:
      actions: read
      pull-requests: write
    steps:
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions/cache@v4
        id: cache-bloaty
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./examples/nrf52/target/
          key: ${{ runner.os }}-bloaty-${{ hashFiles('host/Cargo.lock', 'host-macros/Cargo.lock', 'examples/nrf52/Cargo.lock', 'examples/apps/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bloaty-

      - run: rustup target add thumbv7em-none-eabihf
      - run: rustup component add rust-src llvm-tools
      - if: steps.cache-bloaty.outputs.cache-hit != 'true'
        run: cargo install cargo-binutils

      - name: Check out the repo with the full git history
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Build new binary
        working-directory: ./examples/nrf52
        run: |
          echo 'RESULT<<EOF' >> $GITHUB_OUTPUT
          cargo size --release --features nrf52840 --bin ble_bas_peripheral >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        id: new-size
      - name: Save binary
        run: |
          mv ./examples/nrf52/target/thumbv7em-none-eabihf/release/ble_bas_peripheral ./examples/nrf52/target/thumbv7em-none-eabihf/release/original.elf
      - name: If it's a PR checkout the base commit
        if: ${{ github.event.pull_request }}
        run: git checkout ${{ github.event.pull_request.base.sha }}
      - name: Rebuild with the base commit
        if: ${{ github.event.pull_request }}
        working-directory: ./examples/nrf52
        run: cargo build --release --features nrf52840 --bin ble_bas_peripheral
      - name: Run Bloaty to compare both output files
        if: ${{ github.event.pull_request }}
        id: bloaty-comparison
        uses: carlosperate/bloaty-action@v1
        with:
          bloaty-args: ./examples/nrf52/target/thumbv7em-none-eabihf/release/original.elf -- ./examples/nrf52/target/thumbv7em-none-eabihf/release/ble_bas_peripheral
          output-to-summary: true
      - name: Add a PR comment with the bloaty diff
        if: ${{ github.event.pull_request }}
        continue-on-error: true
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## PR build size\n \`\`\`\n${{ join(steps.new-size.outputs.*, '\n') }}\n\`\`\`\n ### Diff\n\`\`\`\n${{ steps.bloaty-comparison.outputs.bloaty-output-encoded }}\`\`\`\n`
            })
